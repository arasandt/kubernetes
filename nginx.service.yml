# apiVersion: v1
# kind: Service
# metadata:
#   name: my-nginx-clusterip
#   labels:
#     app: my-nginx #this label links to the PODs
# spec:
#   type: ClusterIP #optional
#   selector: 
#     app: my-nginx
#   ports: 
#   - port: 8080
#     targetPort: 80

# apiVersion: v1
# kind: Service
# metadata:
#   name: my-nginx-service-nodeport
#   labels:
#     app: my-nginx
# spec:
#   type: NodePort
#   selector: 
#     app: my-nginx
#   ports: 
#   - port: 80
#     targetPort: 80
#     nodePort: 31000 # no need for port forwarding. use locahost:31000

apiVersion: v1
kind: Service
metadata:
  name: my-nginx-service-loadbalancer
  labels:
    app: my-nginx
spec:
  type: LoadBalancer
  selector: 
    app: my-nginx
  ports: 
  - name: "80"
    port: 80
    targetPort: 80

# get svc
# kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml  ##(This will automatically use the pod's labels as selectors)
# kubectl expose pod redis --port=6379 --name redis-service --target-port=6379
# Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
# kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml

# create service and pod with same name
# run httpd --image=httpd:alpine --port=80 --expose  # the defauly type is ClusterIP
# OR kubectl expose pod httpd --port=80 --name httpd --type=ClusterIP